{"version":3,"file":"components-global-sideNav-SideNav-stories.2d2dfbc5.iframe.bundle.js","mappings":";AAuBA;;;;;;AAMA;AAIA;;AAEA;;;AAIA;ACiCA;;AAEA;AACA;AACA;AACA;;;;;AAKA;;AAGA;AAGA;;AAIA;;;AAIA;;;;AAKA","sources":["webpack://kyndryl-ds-poc/./src/components/global/sideNav/sideNav.ts","webpack://kyndryl-ds-poc/./src/components/global/sideNav/sideNavLink.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport SideNavScss from './sideNav.scss';\nimport '../../reusable/icon/icon';\n\nimport chevRightIcon from '@carbon/icons/es/chevron--right/24';\n\n/**\n * The global Side Navigation component.\n * @slot unnamed - The default slot, for side nav links.\n * @fires on-toggle - Captures the click event and emits the collapsed state and original event details.\n */\n@customElement('kyn-side-nav')\nexport class SideNav extends LitElement {\n  static override styles = SideNavScss;\n\n  /** Side nav collapsed state. */\n  @property({ type: Boolean })\n  collapsed = false;\n\n  override render() {\n    return html`\n      <nav class=${classMap({ 'nav--collapsed': this.collapsed })}>\n        <ul>\n          <slot></slot>\n        </ul>\n\n        <button\n          class=${classMap({\n            'nav-toggle': true,\n            'nav-toggle--collapsed': this.collapsed,\n          })}\n          @click=${(e: Event) => this.onNavToggle(e)}\n        >\n          <kyn-icon .icon=${chevRightIcon}></kyn-icon>\n        </button>\n      </nav>\n    `;\n  }\n\n  private onNavToggle(e: Event) {\n    this.collapsed = !this.collapsed;\n\n    const event = new CustomEvent('on-toggle', {\n      detail: { collapsed: this.collapsed, origEvent: e },\n    });\n    this.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-side-nav': SideNav;\n  }\n}\n","import { LitElement, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport SideNavLinkScss from './sideNavLink.scss';\nimport '../../reusable/icon/icon';\n\nimport chevDownIcon from '@carbon/icons/es/chevron--down/16';\nimport chevRightIcon from '@carbon/icons/es/chevron--right/16';\n\n/**\n * Link component for use in the global Side Navigation component.\n * @fires on-click - Captures the click event and emits the original event, level, and if default was prevented.\n * @slot unnamed - The default slot, for the link text.\n * @slot icon - Slot for an icon, level 1 links only.\n * @slot links - Slot for the next level of links, supports three levels.\n */\n@customElement('kyn-side-nav-link')\nexport class SideNavLink extends LitElement {\n  static override styles = SideNavLinkScss;\n\n  /** Link url. */\n  @property({ type: String })\n  href = '';\n\n  /** Level 1 link expanded state. */\n  @property({ type: Boolean })\n  expanded = false;\n\n  /** Link level, supports three levels.\n   * @ignore\n   */\n  @state()\n  level = 1;\n\n  /** The side nav collapsed state.\n   * @ignore\n   */\n  @state()\n  collapsed = false;\n\n  /**\n   * Determines if sub-links are slotted.\n   * @ignore\n   */\n  @state()\n  isSlotted = false;\n\n  /**\n   * Number of slotted links.\n   * @ignore\n   */\n  @state()\n  numSublinks = 0;\n\n  /**\n   * Positioning for the level 3 flyout.\n   * @ignore\n   */\n  @state()\n  flyoutStyles = {};\n\n  override render() {\n    const classes = {\n      'level--1': this.level == 1,\n      'level--2': this.level == 2,\n      'level--3': this.level == 3,\n      'nav-collapsed': this.collapsed,\n      'link-expanded': this.expanded,\n    };\n\n    return html`\n      <li class=${classMap(classes)}>\n        <a\n          href=${this.href}\n          @click=${(e: Event) => this.handleClick(e)}\n          @mouseover=\"${(e: Event) => this.onNavLinkHover(e)}\"\n          @focus=\"${(e: Event) => this.onNavLinkHover(e)}\"\n        >\n          <slot name=\"icon\"></slot>\n          <span class=\"text\"><slot></slot></span>\n\n          ${this.isSlotted\n            ? html`\n                <span class=\"arrow-icon\">\n                  ${this.level == 1\n                    ? html`<kyn-icon .icon=${chevDownIcon}></kyn-icon>`\n                    : null}\n                  ${this.level == 2\n                    ? html`<kyn-icon .icon=${chevRightIcon}></kyn-icon>`\n                    : null}\n                </span>\n              `\n            : null}\n        </a>\n\n        <ul style=${styleMap(this.flyoutStyles)}>\n          <slot name=\"links\"></slot>\n        </ul>\n      </li>\n    `;\n  }\n\n  override firstUpdated() {\n    this.determineIfSlotted();\n    this.determineLevel();\n  }\n\n  private determineIfSlotted() {\n    let hasHtmlElement = false;\n    let nodeCount = 0;\n\n    const slotNodes =\n      this.shadowRoot!.querySelectorAll('slot')[2].assignedNodes();\n\n    slotNodes.forEach((node) => {\n      if (node instanceof HTMLElement) {\n        hasHtmlElement = true;\n        nodeCount++;\n      }\n    });\n\n    this.isSlotted = hasHtmlElement;\n    this.numSublinks = nodeCount;\n  }\n\n  private determineLevel() {\n    const parentNode = this.shadowRoot!.host.parentNode;\n    if (parentNode!.nodeName == 'KYN-SIDE-NAV') {\n      this.level = 1;\n    } else if (parentNode!.parentNode!.nodeName == 'KYN-SIDE-NAV') {\n      this.level = 2;\n    } else {\n      this.level = 3;\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n\n    document\n      .querySelector('kyn-side-nav')!\n      .addEventListener('on-toggle', (e: any = {}) => {\n        this.collapsed = e.detail.collapsed;\n      });\n  }\n\n  private handleClick(e: Event) {\n    let preventDefault = false;\n\n    if (this.level == 1 && this.isSlotted) {\n      preventDefault = true;\n      this.expanded = !this.expanded;\n    }\n\n    if (preventDefault) {\n      e.preventDefault();\n    }\n\n    this.requestUpdate();\n\n    const event = new CustomEvent('on-click', {\n      detail: {\n        origEvent: e,\n        level: this.level,\n        defaultPrevented: preventDefault,\n      },\n    });\n    this.dispatchEvent(event);\n  }\n\n  private onNavLinkHover(e: Event) {\n    const target: any = e.currentTarget;\n    const headerHeight = 48,\n      linkHeight = 38,\n      scrollTop = document\n        .querySelector('kyn-side-nav')!\n        .shadowRoot?.querySelector('nav ul')!.scrollTop;\n    const flyoutHeight = this.isSlotted ? linkHeight * this.numSublinks : 0;\n\n    // calculate flyout menu positioning and max height for overflow\n    let top =\n      target!.offsetTop - scrollTop! + headerHeight + flyoutHeight >\n      window.innerHeight\n        ? window.innerHeight - flyoutHeight - headerHeight\n        : target!.offsetTop - scrollTop!;\n    top = top < 0 ? 0 : top;\n    const maxHeight = window.innerHeight - headerHeight;\n\n    this.flyoutStyles = {\n      top: top + 'px',\n      'max-height': maxHeight + 'px',\n    };\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'kyn-side-nav-link': SideNavLink;\n  }\n}\n"],"names":[],"sourceRoot":""}